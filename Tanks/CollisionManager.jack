class CollisionManager {
    static List m_colliders;

    function void init() {
        let m_colliders = List.new();
        return;
    }

    function void update() {
        var int i, j;
        var Collider collider;

        while (i < m_colliders.size()) {
            let j = i;
            let collider = m_colliders.at(i);
            do CollisionManager.__checkCollision(collider, j);
            let i = i + 1;
        }
        return;
    }

    function void updateCollider(Collider collider) {
        do CollisionManager.__checkCollision(collider, 0);
        return;
    }

    function void __checkCollision(Collider collider, int start) {
        var Collider other;
        var int j;
        var CollisionInfo collisionA;
        let j = start;
        do collider.reset();
        while (j < m_colliders.size()) {
            let other = m_colliders.at(j);
            if (collider.intersects(other)) {
                let collisionA = collider.addCollision(other);
                do other.linkCollision(collisionA);
            }
            let j = j + 1;
        }
        return;
    }

    function int addCollider(Collider collider) {
        do m_colliders.add(collider);
        return m_colliders.size() - 1;
    }

    function void removeCollider(int slot) {
        var int i;
        var Collider collider;
        do m_colliders.removeAt(slot);
        let i = slot;
        while (i < m_colliders.size()) {
            let collider = m_colliders.at(i);
            do collider.moveSlot();
            let i = i + 1;
        }

        return;
    }
}