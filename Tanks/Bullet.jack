class Bullet {
    field int m_target;
    field Vector m_direction;
    field int m_moveSpeed; 
    field RectangleBody m_body;
    field int magic;
    field boolean m_destroyOnNextUpdate;

    constructor Bullet new(Vector position, Vector direction, int target, int type) {
        var int newX, newY, width, height;
        let m_direction = direction;
        let m_moveSpeed = 3;
        let m_destroyOnNextUpdate = false;
        let m_target = target;

        if (direction.eq(Vector.up()) | direction.eq(Vector.down())) {
            let width = 3;
            let height = 5;
        }

        else {
            let width = 5;
            let height = 3;
        }

        let m_body = RectangleBody.build(position.x(), position.y(), width, height, type, List.twoElements(2, m_target), List.oneElement(2));

        let newX = position.x();
        let newY = position.y();
        do Screen.setColor(1);
        do Screen.drawRectangle(newX, newY, newX + width - 1, newY + height - 1);   
        let magic = 7000;
        do position.dispose();
        return this;
    }

    method int getX() {
        return m_body.x();
    }

    method int getY() {
        return m_body.y();
    }

    method void update() {
        var int oldX, oldY, newX, newY, delta;
        var boolean destroyFlag;
        var Collider collider;
        let oldX = getX();
        let oldY = getY();

        let delta = m_body.moveDirection(m_direction, m_moveSpeed);

        let newX = getX();
        let newY = getY();

        let collider = m_body.collider();

        let destroyFlag = 
            (newX < 0) |
            (newX > (511 - m_body.width())) | 
            (newY < 0) | 
            (newY > (255 - m_body.height())) |
            (delta = 0) | m_destroyOnNextUpdate;

        if (collider.collidesWith(m_target)) {
            let m_destroyOnNextUpdate = true;
        }

        do redraw(oldX, oldY);
        if (destroyFlag) { 
            //do BattleCityGame.drawBoom(this);
            do BattleCityGame.destroyBullet(this); 
        }
        return;
    }

    method void redraw(int oldX, int oldY) {
        var int newX, newY;
        let newX = getX();
        let newY = getY();
        do Screen.setColor(0);
        do Screen.drawRectangle(oldX, oldY, oldX + m_body.width() - 1, oldY + m_body.height() - 1);
        do Screen.setColor(1);
        do Screen.drawRectangle(newX, newY, newX + m_body.width() - 1, newY + m_body.height() - 1);
        return;
    }

    method void dispose() {
        var int x, y;
        let x = getX();
        let y = getY();
        do Screen.setColor(0);
        do Screen.drawRectangle(x, y, x + m_body.width(), y + m_body.height());
        do Screen.setColor(1);
        do m_direction.dispose();
        do m_body.dispose();
        do Memory.deAlloc(this);
        return;
    }
}