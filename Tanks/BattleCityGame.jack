class BattleCityGame {
	static Player player;
    static Vector playerStartPosition;
    static List bullets;
    static List enemies;
    static int globalIndex;
    //static Sprite boom;

    function void init() {
        do SpriteManager.loadPlayerTankUp();
        do SpriteManager.loadPlayerTankRight();
        do SpriteManager.loadBoom();
        //let boom = SpriteManager.getBoom();
        let bullets = List.new();
        let playerStartPosition = Vector.new(32, 32);
        return;
    }

	function void createBullet(Vector position, Vector direction, int target, int type) {
        do bullets.add(Bullet.new(position, direction, target, type));
        return;
    }

    function void destroyBullet(Bullet bullet) {
        var int bulletIndex;
        let bulletIndex = bullets.indexOf(bullet);
        if (bulletIndex = -1) { return; }
        do bullets.removeAt(bulletIndex);
        let globalIndex = globalIndex - 1;
        do bullet.dispose();
        return;
    }

    function void destroyEnemy(Enemy enemy) {
        var int index;
        let index = enemies.indexOf(enemy);
        if (index = -1) { return; }
        do enemies.removeAt(index);
        let globalIndex = globalIndex - 1;
        do enemy.dispose();
        return;
    }


	function void exec() {
        var Bullet bulletBuf;
        var Enemy enemyBuf;
        do Graphics.fillScreen(0);
        do Screen.setColor(1);

        do Map.mapDraw();

        let player = Player.new(playerStartPosition.clone());
        let enemies = List.oneElement(Enemy.new(Vector.new(280, 140)));


        while (true) {
            if (KeyboardExtension.keyDown() = 81) {do GameCore.setState(1); do BattleCityGame.__clearResources(); return;} // Q

            do CollisionManager.update();
            let globalIndex = 0;
            while (globalIndex < bullets.size()) {
                let bulletBuf = bullets.at(globalIndex);
                do bulletBuf.update();
                let globalIndex = globalIndex + 1;
            }
            do player.update();
            let globalIndex = 0;
            while (globalIndex < enemies.size()) {
                let enemyBuf = enemies.at(globalIndex);
                do enemyBuf.update();
                let globalIndex = globalIndex + 1;
            }
        }

		return;
	}

    function void __clearResources() {
        var Bullet bulletBuf;
        do player.dispose();
        while (~(bullets.size() = 0)) {
            let bulletBuf = bullets.at(0);
            do bulletBuf.dispose();
            do bullets.removeAt(0);
        }
        return;
    }

    function void drawBoom(Bullet bullet) {
        var int x, y;
        let x = bullet.getX();
        let y = bullet.getY();
        do Screen.setColor(1);
        //do Drawer.drawSprite(x, y, boom, false, false);
        do Screen.drawRectangle(x, y, 50, 50);
        do Screen.setColor(0);
        //do SpriteManager.disposeBoom();
        return;
    }
}