class Collider {
    field BoundingBox m_box;
    field ColliderMetadata m_metadata;
    field List m_collisions;

    constructor Collider new(BoundingBox box, ColliderMetadata data) {
        let m_box = box;
        let m_metadata = data;
        return this;
    }

    method BoundingBox box() { return m_box; }

    method boolean intersects(Collider other) {
        return m_box.intersects(other.box());
    }

    method CollisionInfo addCollision(Collider other) {
        var CollisionInfo item;
        let item = CollisionInfo.new(this, other);
        do m_collisions.add(item);
        return item;
    }

    method void linkCollision(CollisionInfo linked) {
        do m_collisions.add(CollisionInfo.link(linked));
        return;
    }

    method void reset() {
        if (m_collisions.size() = 0)
        {
            return;
        }
        var int i;
        var CollisionInfo collision;
        while (i < m_collisions.size()) {
             m_collisions[i].dispose();
             let i = i + 1;
        }
        do m_collisions.clear();
        return;
    }

    method boolean hasCollisions() {
        var int i;
        var CollisionInfo collision;
        if (m_collisions.size() = 0)
        {
            return false;
        }
        let i = 0;
        while (i < m_collisions.size()) {
             if (collision.valid())
             {
                return true;
             }
             let i = i + 1;
        }
        return false;
    }

    method void dispose() {
        var int i;
        var CollisionInfo collision;
        let i = 0;
        while (i < m_collisions.size()) {
             let collision = m_data.at(i);
             do collision.dispose();
             let i = i + 1;
        }
        do m_collisions.dispose();
        do m_box.dispose();
        do m_metadata.dispose();
        do Memory.deAlloc(this);
        return;
    }
}