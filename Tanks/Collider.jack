class Collider {
    field BoundingBox m_box;
    field ColliderMetadata m_metadata;
    field List m_collisions;
    field int m_slot;
    field int magic;

    constructor Collider new(BoundingBox box, ColliderMetadata data) {
        let magic = 1000;
        let m_box = box;
        let m_metadata = data;
        let m_collisions = List.new();
        let m_slot = 0;
        return this;
    }

    method int x() { return m_box.x(); }
    method int y() { return m_box.y(); }
    method int width() { return m_box.width(); }
    method int height() { return m_box.height(); }
    method List collisions() { return m_collisions; }
    method int type() { return m_metadata.type(); }
    method int id() { return m_metadata.id(); }
    method BoundingBox box() { return m_box; }

    method void setSlot(int value) { let m_slot = value; return; }
    method void moveSlot() { let m_slot = m_slot - 1; return; }

    method boolean collidesWith(int target) {
        var CollisionInfo collision;
        var int i;
        var Collider b;
        let i = 0;
        if (m_collisions.size()) {
            let collision = m_collisions.at(i);
            let b = collision.B();
            if (b.type() = target) {
                return true;
            }
            let i = i + 1;
        }
        return false;
    }

    method boolean intersects(Collider other) {
        if (~(m_metadata.isTargetType(other.type()))) {
            return false;
        }
        return m_box.intersects(other.box());
    }

    method CollisionInfo addCollision(Collider other) {
        var CollisionInfo item;
        let item = CollisionInfo.new(this, other);
        do m_collisions.add(item);
        return item;
    }

    method void linkCollision(CollisionInfo linked) {
        do m_collisions.add(CollisionInfo.link(linked));
        return;
    }

    method void reset() {
        var int i;
        var CollisionInfo collision;
        if (m_collisions.size() = 0)
        {
            return;
        }
        while (i < m_collisions.size()) {
             let collision = m_collisions.at(i);
             do collision.dispose();
             let i = i + 1;
        }
        do m_collisions.clear();
        return;
    }

    method boolean hasCollisions() {
        var int i;
        var CollisionInfo collision;
        if (m_collisions.size() = 0)
        {
            return false;
        }
        let i = 0;
        while (i < m_collisions.size()) {
             if (collision.valid())
             {
                return true;
             }
             let i = i + 1;
        }
        return false;
    }

    method void move(int x, int y) {
        do m_box.setX(m_box.x() + x);
        do m_box.setY(m_box.y() + y);
        do CollisionManager.updateCollider(this);
        return;
    }

    method void moveVec(Vector delta) {
        do move(delta.x(), delta.y());
        return;
    }

    method void setPosition(int x, int y) {
        do m_box.setX(x);
        do m_box.setY(y);
        do CollisionManager.updateCollider(this);
        return;
    }

    method void dispose() {
        do reset();
        do m_collisions.dispose();
        do m_box.dispose();
        do m_metadata.dispose();
        do CollisionManager.removeCollider(m_slot);
        do Memory.deAlloc(this);
        return;
    }
}