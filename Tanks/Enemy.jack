class Enemy {
    field int m_currentAction;
    field Vector m_currentOrientation;
    field int m_moveSpeed, m_reloadTime, m_actionDuration;
    field Sprite m_currentSprite;
    field boolean m_mirrorX, m_mirrorY;
    field Timer m_reloadTimer;
    field RectangleBody m_body;
    field Timer m_actionTimer;

    constructor Enemy new(Vector startPosition) {
        let m_body = RectangleBody.build(startPosition.x(), startPosition.y(), 30, 30, 3, List.threeElements(2, 1, 0), List.twoElements(2, 0));
        let m_moveSpeed = 1;
        let m_reloadTime = 100;
        let m_actionDuration = 40;
        let m_currentSprite = SpriteManager.getEnemyTankUp();
        let m_currentAction = 3;
        let m_currentOrientation = Vector.up();
        let m_reloadTimer = Timer.new();
        let m_actionTimer = Timer.new();
        do Drawer.drawSprite(getX(), getY(), m_currentSprite, false, false);
        return this;
    }

    method void setAction(int value) {
        let m_currentAction = value;
        return;
    }

    method int action() {
        return m_currentAction;
    }

    method void update() {
        var int oldX, oldY;
        var boolean hasMoved;
        var Collider collider;

        let oldX = m_body.x();
        let oldY = m_body.y();

        do m_reloadTimer.update();
        if ((m_currentAction > 5) & m_reloadTimer.timeOut()) { do __shoot(); do m_reloadTimer.start(m_reloadTime); }
        do m_actionTimer.update();
        if (m_actionTimer.timeOut()) { do __changeAction(); do m_actionTimer.start(m_actionDuration); }
        let hasMoved = __processMovement();

        let collider = m_body.collider();
        if (collider.collidesWith(1)) {
            do BattleCityGame.destroyEnemy(this);
            return;
        }

        if (~hasMoved) { return; }
        do __updateSprite();

        do redraw(oldX, oldY);

        return;
    }

    method int getX() {
        return m_body.x();
    }

    method int getY() {
        return m_body.y();
    }

    method void __changeAction() {
        let m_currentAction = LCGRandom.randRange(0, 10);
        return;
    }

    method boolean __processMovement() {
        var int key;
        let key = Keyboard.keyPressed();
        if (m_currentAction = 1) { do m_body.moveX(-m_moveSpeed); let m_currentOrientation = Vector.left(); return true; } // Arrow left or A
        if (m_currentAction = 2) { do m_body.moveY(-m_moveSpeed); let m_currentOrientation = Vector.up(); return true; } // Arrow up or W
        if (m_currentAction = 3) { do m_body.moveX(m_moveSpeed); let m_currentOrientation = Vector.right(); return true; } // Arrow right or D
        if (m_currentAction = 4) { do m_body.moveY(m_moveSpeed); let m_currentOrientation = Vector.down(); return true; } // Arrow down or S
        return false;
    }

    method void redraw(int oldX, int oldY) {
        do Screen.setColor(0);
        do Screen.drawRectangle(oldX, oldY, oldX + m_currentSprite.width() - 1, oldY + m_currentSprite.height() - 1);
        do Screen.setColor(1);
        do Drawer.drawSprite(
            getX(), 
            getY(), 
            m_currentSprite, 
            m_currentOrientation.eq(Vector.left()), 
            m_currentOrientation.eq(Vector.down()));

        return;
    }

    method void __shoot() {
        var Vector bulletPosition;
        if (m_currentOrientation = Vector.up()) { let bulletPosition = Vector.new(getX() + 15, getY() - 3); }
        if (m_currentOrientation = Vector.right()) { let bulletPosition = Vector.new(getX() + 30, getY() + 15); }
        if (m_currentOrientation = Vector.down()) { let bulletPosition = Vector.new(getX() + 15, getY() + 30); }
        if (m_currentOrientation = Vector.left()) { let bulletPosition = Vector.new(getX() - 3, getY() + 15); }
        do BattleCityGame.createBullet(bulletPosition, m_currentOrientation.clone(), 0, 4);
        return;
    }

    method void __updateSprite() {
        if (m_currentOrientation.eq(Vector.up()) | m_currentOrientation.eq(Vector.down())) {
            let m_currentSprite = SpriteManager.getEnemyTankUp(); 
        }
        else { let m_currentSprite = SpriteManager.getEnemyTankRight(); }
        return;
    }

    method void dispose() {
        do m_reloadTimer.dispose();
        do m_actionTimer.dispose();
        do m_body.dispose();
        do Screen.setColor(0);
        do Screen.drawRectangle(getX(), getY(), getX() + 33, getY() + 33);
        do Screen.setColor(1);
        do Memory.deAlloc(this);
        return;
    }
}