class BitwiseExtension
{
    function int leftShift(int x, int n) {
        var int i;
        if (n < 0)  { do Sys.error(51); }
        if (n > 15)  { return 0; }
        let i = 0;
        while (i < n) {
             let x = x + x;
             let i = i + 1;
        }
        return x;
    }

    function int rightShift(int x, int n) {
         var int i;
        if (n < 0)  { do Sys.error(50); }
        if (n > 15)  { return 0; }
        let i = 0;
        while (i < n) {
            if (x < 0) {
                let x = x & 32767;
                let x = x/2;
                let x = x | 16384;
            }
            else { let x = x/2; }
            let i = i + 1;
        }
        return x;
    }

    function int takeNLowBits(int x, int n) {
        if (n < 0)  { do Sys.error(50); }
        if (n > 15)  { return x; }
        if (x < 0)  { let x = x & 32767; }
        return MathExtension.remainsDivision(x, MathExtension.pow(2,n));
    }

    function int reverseBits(int x) {
        var int res, i;
        let i = 0;
        while (i < 16) {
            let res = res + res;
            if (x & 1 = 1) { let res = res | 1; }
            if (x < 0) {
                let x = x & 32767;
                let x = x/2;
                let x = x | 16384;
            }
            else { let x = x/2; }
            let i = i + 1;
        }
        return res;
    }
}